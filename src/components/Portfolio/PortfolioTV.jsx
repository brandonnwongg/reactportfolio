/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/TV.glb -o src/components/Portfolio/PortfolioTV.jsx -k -r public 
*/
import { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import * as THREE from "three";
import { useAtom } from "jotai";
import { projectAtom } from "./Interface";
import { config } from "../../config";
import { useFrame } from "@react-three/fiber";

export function PortfolioTV(props) {
  const { nodes, materials } = useGLTF("/models/TV.glb");

  const [project] = useAtom(projectAtom);
  const imageTexture = useTexture(project.image);
  const videoRef = useRef(null);
  const [texture, setTexture] = useState(null);

  const isVideo = project.clip?.endsWith(".mp4");
  useEffect(() => {
    let video;
    let isMounted = true;

    if (isVideo) {
      video = document.createElement("video");
      video.src = project.clip;
      video.loop = true;
      video.muted = true;
      video.playsInline = true;
      video.autoplay = true;

      video.addEventListener("canplay", () => {
        if (!isMounted) return;

        video.play();

        const videoTex = new THREE.VideoTexture(video);
        videoTex.center.set(0.5, 0.5);
        videoTex.rotation = Math.PI / 2;
        videoTex.repeat.x = -1;

        setTexture(videoTex);
      });

      videoRef.current = video;
    } else if (imageTexture) {
      imageTexture.center.set(0.5, 0.5);
      imageTexture.rotation = Math.PI / 2;
      imageTexture.repeat.x = -1;

      setTexture(imageTexture);
    }

    return () => {
      isMounted = false;
      if (video) {
        video.pause();
        video.src = "";
        video.load(); // release memory
      }
    };
  }, [project.clip, project.image, isVideo, imageTexture]);

  const emissiveRef = useRef();

  useFrame(({ clock }) => {
    if (emissiveRef.current) {
      emissiveRef.current.emissiveIntensity = Math.random() > 0.9 ? 2 : 1;
    }
  });
  return (
    <group
      {...props}
      dispose={null}
      scale={0.8}
      position={[3, 0.45, 0]}
      rotation={[0, -2, 0]}
    >
      <group name="Cube" position={[0, 4.003, 0]} scale={[2.034, 3.646, 3.883]}>
        <mesh
          name="Cube_1"
          geometry={nodes.Cube_1.geometry}
          material={materials.Material}
        />
        <mesh
          name="Cube_2"
          geometry={nodes.Cube_2.geometry}
          material={materials["Material.002"]}
        />
      </group>
      <mesh
        name="Legs"
        geometry={nodes.Legs.geometry}
        material={materials["Material.006"]}
        position={[1.437, 0, 3.157]}
      />
      <group
        name="Screen"
        position={[2.3, 4.933, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[2.192, 1.961, 3.099]}
      >
        {texture && (
          <mesh name="Plane" geometry={nodes.Plane.geometry}>
            <meshBasicMaterial map={texture} />
          </mesh>
        )}
        <mesh
          name="Plane_1"
          geometry={nodes.Plane_1.geometry}
          material={materials["Material.005"]}
        />
      </group>
      <group
        name="Screen2"
        position={[2.3, 1.711, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.527, 1.961, 3.099]}
      >
        <mesh name="Plane001" geometry={nodes.Plane001.geometry}>
          <meshStandardMaterial
            ref={emissiveRef}
            emissive="#ffff00"
            emissiveIntensity={1.5}
            metalness={0.3}
            color="black"
            opacity={1}
          />
        </mesh>
        <mesh
          name="Plane001_1"
          geometry={nodes.Plane001_1.geometry}
          material={materials["Material.005"]}
        />
      </group>
    </group>
  );
}
config.AcademicProjects.forEach((project) => {
  useTexture.preload(project.image);
});
config.AcademicProjects.forEach((project) => {
  useTexture.preload(project.clip);
});
useGLTF.preload("/models/TV.glb");
